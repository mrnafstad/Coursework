#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1556 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"huffman.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 6 #"reason"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Error: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 6 #"reason"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\": \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"scheme-report-environment"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"1 Diverse"
0 0 17 29 1 #"\n"
0 0 17 3 100
(
 #"F\303\270r vi begynner med Huffman-koding tar vi med et par mindre o"
 #"ppgaver der vi skal bryne oss litt p\303\245"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #" h\303\270yereordens prosedyrer, og lambda og let."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 103
(
 #"(a) I forelesningen den 11. september s\303\245 vi p\303\245 en impl"
 #"ementasjon av datatypen par (\342\200\230cons-celler\342\200\231)"
) 0 0 17 29 1 #"\n"
0 0 17 3 76
(
 #"som en prosedyre. Her er nok en alternativ variant av par represente"
 #"rt som p"
) 0 0 17 3 28 #"rosedyre, gitt ved f\303\270lgende"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"konstruktor;"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"(define (p-cons x y)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(lambda (proc) (proc x y)))"
0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #"Definer selektorene p-car og p-cdr for denne representasjonen. Vi br"
 #"uker p-* i navnene s\303\245 de ikke"
) 0 0 17 29 1 #"\n"
0 0 17 3 106
(
 #"kolliderer med de innebygde versjonene (men dere skal ikke bruke dem"
 #" her). Ellers vil vi at p-car og p-cdr"
) 0 0 17 29 1 #"\n"
0 0 17 3 100
(
 #"skal gi samme resultat som car og cdr gj\303\270r for den innebygde "
 #"versjonen av cons. Noen kalleksempler:"
) 0 0 17 29 1 #"\n"
0 0 17 3 22 #"? (p-cons \"foo\" \"bar\")"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"\342\206\222 #<procedure>"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"? (p-car (p-cons \"foo\" \"bar\"))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"\342\206\222 \"foo\""
0 0 17 29 1 #"\n"
0 0 17 3 30 #"? (p-cdr (p-cons \"foo\" \"bar\"))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"\342\206\222 \"bar\""
0 0 17 29 1 #"\n"
0 0 17 3 53
#"? (p-car (p-cdr (p-cons \"zoo\" (p-cons \"foo\" \"bar\"))))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"\342\206\222 \"foo\""
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"p-cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"p-car"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"p-cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 2 #") "
0 0 14 3 1 #"q"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"p-cons"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"p-car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"p-cons"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"p-cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"p-cons"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"p-car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"p-cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"p-cons"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"zoo\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"p-cons"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 92
(
 #"(b) Vis hvordan de to let-uttrykkene under kan skrives om til applik"
 #"asjon av lambda-uttrykk."
) 0 0 17 29 1 #"\n"
0 0 17 3 32 #"(Forelesningsnotatene fra 11/9 e"
0 0 17 3 69
(
 #"r relevante her.) Oppgi ogs\303\245 hvilken verdi uttrykkene evaluer"
 #"er til."
) 0 0 17 29 1 #"\n"
0 0 17 3 17 #"? (define foo 42)"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"? (let ((foo 5)"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"        (x foo))"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"    (if (= x foo)"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"        'same"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"        'different))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"? (let ((bar foo)"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"        (baz 'towel))"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"    (let ((bar (list bar baz))"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"          (foo baz))"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"       (list foo bar)))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #"I prosedyrene gir let og Lambda versjon samme output, henholdsvis di"
 #"fferent og (towel (42 towel))"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"foo"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 4 #"same"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 9 #"different"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"bar"
0 0 24 3 1 #" "
0 0 14 3 3 #"baz"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   (("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"bar"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 3 1 #" "
0 0 14 3 3 #"bar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"bar"
0 0 24 3 1 #" "
0 0 14 3 3 #"baz"
0 0 24 3 2 #") "
0 0 14 3 3 #"baz"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 3 #"foo"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"towel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 104
(
 #"(c) Her skal dere skrive en prosedyre infix-eval, som skal ta ett ar"
 #"gument exp som forventes \303\245 v\303\246re en"
) 0 0 17 29 1 #"\n"
0 0 17 3 105
(
 #"liste av tre elementer: en operand, en operator og nok en operand. R"
 #"eturverdien til infix-eval skal v\303\246re"
) 0 0 17 29 1 #"\n"
0 0 17 3 66
(
 #"resultatet av \303\245 anvende operatoren p\303\245 operandene. Kall"
 #"eksempler:"
) 0 0 17 29 1 #"\n"
0 0 17 3 29 #"? (define foo (list 21 + 21))"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"? (define baz (list 21 list 21))"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"? (define bar (list 84 / 2))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"? (infix-eval foo) \342\206\222 42"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"? "
0 0 17 3 28 #"(infix-eval baz) \342\206\222 (21 21)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"? (infix-eval bar) \342\206\222 42"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"infix-eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"baz"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"bar"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"84"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"infix-eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"infix-eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"baz"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"infix-eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"bar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 109
(
 #"(d) Gitt prosedyren din infix-eval fra oppgaven over, hva blir resul"
 #"tatet av f\303\270lgende kall? Eksemplet likner"
) 0 0 17 29 1 #"\n"
0 0 17 3 109
(
 #"tilsynelatende p\303\245 det siste kallet over med bar som argument."
 #" Forklar kort hvorfor utfallet blir annerledes?"
) 0 0 17 29 1 #"\n"
0 0 17 3 24 #"? (define bah '(84 / 2))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"? (infix-eval bah) \342\206\222 ??"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 102
(
 #"Dette kallet gir en feilmelding siden det andre elementet i bah her "
 #"er symbolet /, og ikke operatoren "
) 0 0 17 29 1 #"\n"
0 0 17 3 13 #"for divisjon."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"bah"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"84"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;(infix-eval bah)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"2 Huffman-koding"
0 0 17 29 1 #"\n"
0 0 17 3 105
(
 #"(a) Gj\303\270r deg kjent med koden "
 #"i definisjonen til decode i v\303\245r fil huffman.scm. Skriv et par"
 #" setninger om"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #"hva som er vitsen med \303\245 bruke en intern hjelpeprosedyre her, "
 #"decode-1, den kalles jo med de samme"
) 0 0 17 29 1 #"\n"
0 0 17 3 26 #"argumentene som hovedprose"
0 0 17 3 47 #"dyren s\303\245 hvorfor ikke heller bare kalle denne?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 107
(
 #"Svar: I decode prosedyren treng"
 #"er man en hjelpeprosedyre for \303\245 kunne hoppe tilbake til roten"
 #" av treet n\303\245r"
) 0 0 17 29 1 #"\n"
0 0 17 3 107
(
 #"      en blad-node er n\303\245dd. Man f\303\245r i praksis en \"eks"
 #"tra\" variabel ved \303\245 bruke hjelpeprosedyren decode-1"
) 0 0 17 29 1 #"\n"
0 0 17 3 34 #"      ved at tree aldri oppdateres"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"(b) Skriv en halerekursiv versjon av decode."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"decode2"
0 0 24 3 1 #" "
0 0 14 3 4 #"bits"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"decode-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"bits"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"bits"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"next-branch"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"choose-branch"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"bits"
0 0 24 3 2 #") "
0 0 14 3 14 #"current-branch"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 24 3 1 #" "
0 0 14 3 11 #"next-branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 24 3 1 #" "
0 0 14 3 11 #"next-branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"decode-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"bits"
0 0 24 3 2 #") "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"decode-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"bits"
0 0 24 3 2 #") "
0 0 14 3 11 #"next-branch"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"decode-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"bits"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 107
(
 #"(c) Fila huffman.scm inneholder et eksempel p\303\245 et kodetre og "
 #"en bitkode, henholdsvis bundet til variablene"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #"sample-tree og sample-code. Hva er resultatet av \303\245 kalle pros"
 #"edyren decode fra oppgaven over med"
) 0 0 17 29 1 #"\n"
0 0 17 3 19 #"disse som argument?"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"? (decode sample-code sample-tr"
0 0 17 3 38 #"ee) \342\206\222 (ninjas fight ninjas by night)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"decode"
0 0 24 3 1 #" "
0 0 14 3 11 #"sample-code"
0 0 24 3 1 #" "
0 0 14 3 11 #"sample-tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 106
(
 #"(d) Skriv en prosedyre encode som transformerer en sekvens av symbol"
 #"er til en sekvens av bits. Input er en"
) 0 0 17 29 1 #"\n"
0 0 17 3 65
#"liste av symboler (meldingen) og et Huffman-tre (kodeboken). Outp"
0 0 17 3 38 #"ut er en liste av 0 og 1. Du kan teste"
0 0 17 29 1 #"\n"
0 0 17 3 100
(
 #"prosedyrene dine med \303\245 kalle decode p\303\245 returverdien fr"
 #"a encode og sjekke at du f\303\245r samme melding:"
) 0 0 17 29 1 #"\n"
0 0 17 3 66
#"? (decode (encode '(ninjas fight ninjas) sample-tree) sample-tree)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"\342\206\222 (ninjas fight ninjas)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 6 #"reason"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Error: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 6 #"reason"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\": \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"scheme-report-environment"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #";; Hjelpemetode for \303\245 encode et enkelt ord."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"encode-word"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 7 #"()     "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"right"
0 0 24 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 15 #"element-of-set?"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbols"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"encode-word"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 15 #"element-of-set?"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbols"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 3 #"))("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"encode-word"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Not a symbol in tree\""
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 85
(
 #";; Hjelpemetode for \303\245 finne ut om et gitt ord finnes i et git"
 #"t sett.                "
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"element-of-set?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"element-of-set?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 11 #"encode-word"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 2 #") "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"encode"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 2 #") "
0 0 14 3 4 #"tree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"decode"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 6 #"ninjas"
0 0 24 3 1 #" "
0 0 14 3 5 #"fight"
0 0 24 3 1 #" "
0 0 14 3 6 #"ninjas"
0 0 24 3 2 #") "
0 0 14 3 11 #"sample-tree"
0 0 24 3 2 #") "
0 0 14 3 11 #"sample-tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 105
(
 #"\342\200\242 Litt bakgrunn for oppgave (e) under: Seksjonene Generat"
 #"ing Huffman trees og Sets of weighted elements"
) 0 0 17 29 1 #"\n"
0 0 17 3 105
(
 #"under 2.3.4 i SICP beskriver en algoritme for \303\245 generere Huff"
 #"man-tr\303\246r. Det samme dekkes p\303\245 foilene fra"
) 0 0 17 29 1 #"\n"
0 0 17 3 110
(
 #"forelesningen den 18/9. Algoritmen opererer p\303\245 en mengde av n"
 #"oder der vi suksessivt sl\303\245r sammen de to nodene"
) 0 0 17 29 1 #"\n"
0 0 17 3 10 #"som har la"
0 0 17 3 97
(
 #"vest frekvens. Mengden av noder er implementert som en liste. Som di"
 #"skutert p\303\245 forelesningen s\303\245"
) 0 0 17 29 1 #"\n"
0 0 17 3 113
(
 #"kan algoritmen utf\303\270res mest effektiv dersom vi s\303\270rger "
 #"for \303\245 holde nodelista sortert etter frekvens. SICP-koden"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"i huffman.scm inneholder funksjonalitet for \303\245 "
0 0 17 3 60
(
 #"generere en sortert liste av l\303\270vnoder som kan brukes for \303"
 #"\245"
) 0 0 17 29 1 #"\n"
0 0 17 3 67
#"initialisere algoritmen; adjoin-set og make-leaf-set. For eksempel:"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"? (make-leaf-set '((a 2) (b 5) (c 1) (d 3) (e 1) (f 3)))"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"\342\206\222 ((leaf e 1) (leaf c 1) (leaf a 2) (leaf f 3) (leaf d 3)"
 #" (leaf b 5)"
) 0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 109
(
 #"(e) Skriv en prosedyre grow-huffman-tree som tar en liste av symbol/"
 #"frekvens-par og returnerer et Huffmantre."
) 0 0 17 29 1 #"\n"
0 0 17 3 18 #"Eksempel p\303\245 kall:"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"? (define freqs '((a 2) (b 5) (c 1) (d 3) (e 1) (f 3)))"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"? (define codebook (grow-huffman-tree freqs))"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"? (decode (encode '(a b c) codebook) codebook) \342\206\222 (a b c)"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"grow-huffman-tree"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 34 #";;hjelpeprosedyre for \303\245 merge par"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mergers"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"mergers"
0 0 24 3 2 #" ("
0 0 14 3 10 #"adjoin-set"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-code-tree"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #";;hjelpeprosedyre for mergers som lager blad sett"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-leaf-set"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"pair"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"adjoin-set"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-leaf"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 13 #"make-leaf-set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"mergers"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-leaf-set"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"freqs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"codebook"
0 0 24 3 2 #" ("
0 0 14 3 17 #"grow-huffman-tree"
0 0 24 3 1 #" "
0 0 14 3 5 #"freqs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"decode"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 8 #"codebook"
0 0 24 3 2 #") "
0 0 14 3 8 #"codebook"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 79
(
 #"(f) Vi er gitt f\303\270lgende alfabet av symboler med frekvenser op"
 #"pgitt i parentes:"
) 0 0 17 29 1 #"\n"
0 0 17 3 102
(
 #"samurais (57), ninjas (20), fight (45), night (12), hide (3), in (2)"
 #", ambush (2), defeat (1), the (5),"
) 0 0 17 29 1 #"\n"
0 0 17 3 13 #"sword (4), by"
0 0 17 29 1 #"\n"
0 0 17 3 64
#"(12), assassin (1), river (2), forest (1), wait (1), poison (1)."
0 0 17 29 1 #"\n"
0 0 17 3 108
(
 #"Generer et Huffman-tre for alfabetet p\303\245 bakgrunn av frekvense"
 #"ne, og svar s\303\245 p\303\245 de "
 #"f\303\270lgende sp\303\270rsm\303\245lene"
) 0 0 17 29 1 #"\n"
0 0 17 3 51 #"med utgangspunkt i meldingen under. (Merk at denne "
0 0 17 3 55
#"skal forst\303\245s som en melding best\303\245ende av 17 symboler;"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"linjeskiftene er ikke en del av meldingen.)"
0 0 17 29 1 #"\n"
0 0 17 3 53
(
 #"\342\200\223 Hvor mange bits bruke"
 #"r det p\303\245 \303\245 kode meldingen?"
) 0 0 17 29 1 #"\n"
0 0 17 3 106
(
 #"\342\200\223 Hva er den gjennomsnittlige lengden p\303\245 hvert kod"
 #"eord som brukes? (Vi tenker at alle symbolene represe"
) 0 0 17 3 8 #"nteres i"
0 0 17 29 1 #"\n"
0 0 17 3 50 #" \303\251n og samme liste slik at linjeskift ignoreres.)"
0 0 17 29 1 #"\n"
0 0 17 3 111
(
 #"\342\200\223 Til slutt: hva er det minste antall bits man ville tren"
 #"gt for \303\245 kode meldingen med en kode med fast lengde"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"(fixed-length code) over det samme alfabetet? Begrunn kort svaret di"
 #"tt."
) 0 0 17 29 1 #"\n"
0 0 17 3 11 #"ninjas figh"
0 0 17 3 1 #"t"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"ninjas fight ninjas"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"ninjas fight samurais"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"samurais fight"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"samurais fight ninjas"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"ninjas fight by night"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 78
(
 #"Svar: Denne meldingen tar 43  bits \303\245 kode (samurais og fight "
 #"har hver 2 bits,"
) 0 0 17 29 1 #"\n"
0 0 17 3 52 #"      mens ninjas, by og night hver har 3 bits), mot"
0 0 17 29 1 #"\n"
0 0 17 3 81
(
 #"      17 [antal symboler i meldingen] *log2 16 [antall symboler i al"
 #"fabetet] = 68"
) 0 0 17 29 1 #"\n"
0 0 17 3 51 #"      bits med fast lengde p\303\245 det samme alfabetet."
0 0 17 29 1 #"\n"
0 0 17 3 89
(
 #"      I meldingen brukes det i snitt 2.53   bits per tegn brukt. Det"
 #"te snittet ville fort"
) 0 0 17 29 1 #"\n"
0 0 17 3 30 #"      vokst om ett av de laves"
0 0 17 3 61
#"t vektede ordene, som hver bruker 7 bits, ble brukt hyppigere"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"      hyppigere enn frekvensen tilsier."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 8 #"samurais"
0 0 24 3 1 #" "
0 0 21 3 2 #"57"
0 0 24 3 3 #") ("
0 0 14 3 6 #"ninjas"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #") ("
0 0 14 3 5 #"fight"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 3 #") ("
0 0 14 3 5 #"night"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #") ("
0 0 14 3 4 #"hide"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"ambush"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 15 3 6 #"defeat"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"the"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 5 #"sword"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"by"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #") ("
0 0 14 3 8 #"assassin"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"river"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"forest"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"wait"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"poison"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"codebook2"
0 0 24 3 2 #" ("
0 0 14 3 17 #"grow-huffman-tree"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 6 #"ninjas"
0 0 24 3 1 #" "
0 0 14 3 5 #"fight"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 6 #"ninjas"
0 0 24 3 1 #" "
0 0 14 3 5 #"fight"
0 0 24 3 1 #" "
0 0 14 3 6 #"ninjas"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 6 #"ninjas"
0 0 24 3 1 #" "
0 0 14 3 5 #"fight"
0 0 24 3 1 #" "
0 0 14 3 8 #"samurais"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 8 #"samurais"
0 0 24 3 1 #" "
0 0 14 3 5 #"fight"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 8 #"samurais"
0 0 24 3 1 #" "
0 0 14 3 5 #"fight"
0 0 24 3 1 #" "
0 0 14 3 6 #"ninjas"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 6 #"ninjas"
0 0 24 3 1 #" "
0 0 14 3 5 #"fight"
0 0 24 3 1 #" "
0 0 14 3 2 #"by"
0 0 24 3 1 #" "
0 0 14 3 5 #"night"
0 0 24 3 2 #") "
0 0 14 3 9 #"codebook2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 101
(
 #"(g) Skriv en prosedyre huffman-leaves som tar et Huffman-tre som inp"
 #"ut og returnerer en liste med par"
) 0 0 17 29 1 #"\n"
0 0 17 3 104
(
 #"av symboler og frekvenser, alts\303\245 det samme som vi kan bruke s"
 #"om utgangspunkt for \303\245 generere treet. For"
) 0 0 17 29 1 #"\n"
0 0 17 3 40 #"eksempel, for sample-tree i huffman.scm:"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"? (huffman-leaves sample-tree)"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"\342\206\222 ((ninjas 8) (fight 5) (night 1) (by 1))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"huffman-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"leaves-1"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"next-left"
0 0 24 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"next-right"
0 0 24 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 5 #"leaf?"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-left"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"weight-leaf"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-left"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-right"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"weight-leaf"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-right"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 5 #"leaf?"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-left"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"weight-leaf"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-left"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"leaves-1"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-right"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"leaves-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"leaves-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"huffman-leaves"
0 0 24 3 1 #" "
0 0 14 3 11 #"sample-tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 108
(
 #"(h) Den forventede gjennomsnittlige lengden p\303\245 kodeordene som"
 #" genereres av et Huffman-tre kan uttrykkes som"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"Sum (i = 1, n) p(s_i) \303\227 |c_i|"
0 0 17 29 1 #"\n"
0 0 17 3 106
(
 #"der p(si) er sannsynligheten for det i-ende symbolet i et alfabet me"
 #"d n symboler og |ci| st\303\245r for lengden"
) 0 0 17 29 1 #"\n"
0 0 17 3 20 #"p\303\245 kodeordet til si"
0 0 17 29 1 #"\n"
0 0 17 3 26 #". (Sagt med andre ord: |ci"
0 0 17 29 1 #"\n"
0 0 17 3 62
(
 #"| er antall bits som Huffman-treet bruker p\303\245 \303\245 kode sy"
 #"mbolet"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"si"
0 0 17 29 1 #"\n"
0 0 17 3 107
(
 #".) Sannsynligheten for et symbol, p(si), er gitt ved dets relative f"
 #"rekvens, alts\303\245 frekvensen for symbolet"
) 0 0 17 29 1 #"\n"
0 0 17 3 63
(
 #"delt p\303\245 total frekvens for alle symboler. Skriv en prosedyre "
 #"e"
) 0 0 17 3 34 #"xpected-codeword-length som tar et"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"Huffman-tre som input og beregner formelen over. Kalleksempel:"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"? (expected-codeword-length sample-tree) \342\206\222 1"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"3"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"5|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"expected-codeword-length"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49
#";;s\303\245nn omtrentlig til \303\245 begynne med, m\303\245 graves"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #";;totalvekt"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"weight"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #";;blader med symboler og vekt i par"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 21 #";;bits f\303\270rste symbol"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #"("
0 0 14 3 14 #"huffman-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 21 #";;vekt f\303\270rste symbol"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 14 #"huffman-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 3 #")))"
0           0
