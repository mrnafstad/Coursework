(load "evaluator.scm")

(set! the-global-environment (setup-environment))
(read-eval-print-loop)

#|

Oppgave 2
a) I denne oppgaven legger vi 1+ og 1- rett inn i lista over primitive
prosedyrer:
(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list 'not not)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '= =)
        (list 'eq? eq?)
        (list 'equal? equal?)
        (list 'display 
              (lambda (x) (display x) 'ok))
        (list 'newline 
              (lambda () (newline) 'ok))
        ;;Oppgave 2 b 1+ og 1-
        (list '1+
              (lambda (x) (+ x 1)))
        (list '1-
              (lambda (x) (- x 1)))
        ))

Oppgave 3
a) and og or implementeres med prosedyrene
(define (eval-and exp env)
  (define (eval-expression-list exp)
    (cond ((null? exp) #t)
          ((last-exp? exp) (mc-eval (first-exp exp) env))
          ((mc-eval (first-exp exp) env) (eval-expression-list (rest-exps exp)))
          (else #f)))
  (eval-expression-list (cdr exp)))

(define (eval-or exp env)
  (define (eval-expression-list exp)
    (cond ((null? exp) #f)
          ((last-exp? exp) (mc-eval (first-exp exp) env))
          ((mc-eval (first-exp exp) env) #t)
          (else (eval-expression-list (rest-exps exp)))))
    (eval-expression-list (cdr exp)))

(define (and? exp)
  (tagged-list? exp 'and))

(define (or? exp)
  (tagged-list? exp 'or))

og tilleggene
        ((or? exp) #t)
        ((and? exp) #t)
og
        ((or? exp) (eval-or exp env))
        ((and? exp) (eval-and exp env))
i henholdsvis special-form? og eval-special-form.


c) let implementeres med prosedyrene
(define (let? exp)
  (tagged-list? exp 'let))
(define (let-initials exp)
  (map cadr (cadr exp)))
(define (let-parameters exp)
  (map car (cadr exp)))
(define (let-body exp)
  (cddr exp))

(define (let->lambda exp env)
  (mc-apply (make-procedure (let-parameters exp)
                        (let-body exp)
                        env)
        (let-initials exp)))
(define (eval-let exp env)
  (mc-eval (let->lambda exp env) env))

og tilleggene
        ((let? exp) #t)
og
        ((let? exp) (mc-eval (eval-let exp env) env))
i henholdsvis special-form? og eval-special-form.
|#